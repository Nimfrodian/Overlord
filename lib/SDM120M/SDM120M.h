#ifndef SDM120M_h
#define SDM120M_h

#include <stdint.h>  // for basic data types

const uint8_t SDM120M_MODBUS_TX_DATA_SIZE = 8;
const uint8_t SDM120M_MODBUS_RX_DATA_SIZE = 9;

typedef struct
{
    float val;   // read value
    uint8_t dataReadyFlg;   // set to true when value is read. Set to false when value is sent through CAN
} SDM120M_dataType;

enum
{
    SDM120M_MODULE_INDX_01 = 0,
    SDM120M_MODULE_INDX_02,
    SDM120M_MODULE_INDX_03,
    SDM120M_MODULE_INDX_04,
    SDM120M_MODULE_INDX_05,
    SDM120M_MODULE_INDX_06,
    SDM120M_MODULE_INDX_07,
    SDM120M_MODULE_INDX_08,
    SDM120M_MODULE_INDX_09,
    SDM120M_MODULE_INDX_10,
    SDM120M_MODULE_INDX_11,
    SDM120M_MODULE_INDX_12,
    SDM120M_MODULE_INDX_13,
    SDM120M_MODULE_INDX_14,
    SDM120M_MODULE_INDX_15,
    SDM120M_MODULE_INDX_16,
    SDM120M_MODULE_INDX_17,
    SDM120M_MODULE_INDX_18,
    SDM120M_MODULE_INDX_19,
    SDM120M_MODULE_INDX_20,
    SDM120M_NUM_OF_MODULES
};

// Modbus available data
enum
{
    SDM120M_READ_VOLTAGE_V = 0,
    SDM120M_READ_CURRENT_A,
    SDM120M_ACTIVE_POWER_W,
    SDM120M_APPARENT_POWER_VA,
    SDM120M_REACTIVE_POWER_VAr,
    SDM120M_POWER_FACTOR,
    SDM120M_FREQUENCY,
    SDM120M_IMPORT_ACTIVE_ENERGY_kWh,
    SDM120M_EXPORT_ACTIVE_ENERGY_kWh,
    SDM120M_IMPORT_REACTIVE_ENERGY_kVArh,
    SDM120M_EXPORT_REACTIVE_ENERGY_kVArh,
    SDM120M_TOTAL_SYSTEM_POWER_DEMAND_W,
    SDM120M_MAXIMUM_TOTAL_SYSTEM_POWER_DEMAND_W,
    SDM120M_IMPORT_SYSTEM_POWER_DEMAND_W,
    SDM120M_MAXIMUM_IMPORT_SYSTEM_POWER_DEMAND_W,
    SDM120M_EXPORT_SYSTEM_POWER_DEMAND_W,
    SDM120M_MAXIMUM_EXPORT_SYSTEM_POWER_DEMAND,
    SDM120M_CURRENT_DEMAND_A,
    SDM120M_MAXIMUM_CURRENT_DEMAND_A,
    SDM120M_TOTAL_ACTIVE_ENERGY_kWh,
    SDM120M_TOTAL_REACTIVE_ENERGY_kVArh,
    SDM120M_NUM_OF_READ,
};

typedef enum
{
    SDM120M_CAN_TX_MSG_TYPE_VOLTAGE_CURRENT = 0,
    SDM120M_CAN_TX_MSG_TYPE_ACTIVE_POWER_APPARENT_POWER,
    SDM120M_CAN_TX_MSG_TYPE_REACTIVE_POWER_POWER_FACTOR,
    SDM120M_CAN_TX_MSG_TYPE_FREQUENCY_IMPORT_ACTIVE_ENERGY,
    SDM120M_CAN_TX_MSG_TYPE_EXPORT_ACTIVE_ENERGY_IMPORT_REACTIVE_ENERGY,
    SDM120M_CAN_TX_MSG_TYPE_EXPORT_REACTIVE_ENERGY_TOTAL_SYSTEM_POWER_DEMAND,
    SDM120M_CAN_TX_MSG_TYPE_MAXIMUM_TOTAL_SYSTEM_POWER_DEMAND_IMPORT_SYSTEM_POWER_DEMAND,
    SDM120M_CAN_TX_MSG_TYPE_MAXIMUM_IMPORT_SYSTEM_POWER_DEMAND_EXPORT_SYSTEM_POWER_DEMAND,
    SDM120M_CAN_TX_MSG_TYPE_MAXIMUM_EXPORT_SYSTEM_POWER_DEMAND_CURRENT_DEMAND_A,
    SDM120M_CAN_TX_MSG_TYPE_MAXIMUM_CURRENT_DEMAND_TOTAL_ACTIVE_ENERGY,
    SDM120M_CAN_TX_MSG_TYPE_TOTAL_REACTIVE_ENERGY_kVArh,
    SDM120M_CAN_TX_MSG_TYPE_NUM,
} sdm120m_can_tx_msg_type;

const uint16_t _sdm120m_mb_module_id[SDM120M_NUM_OF_MODULES] =
{
    16, // main power meter
    32, // power meter for lights
    33, // power meter for sockets
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
};

const uint16_t _sdm120m_mb_start_addrs[SDM120M_NUM_OF_READ] =
{
    [SDM120M_READ_VOLTAGE_V] = 0x0000,
    [SDM120M_READ_CURRENT_A] = 0x0006,
    [SDM120M_ACTIVE_POWER_W] = 0x000C,
    [SDM120M_APPARENT_POWER_VA] = 0x0012,
    [SDM120M_REACTIVE_POWER_VAr] = 0x0018,
    [SDM120M_POWER_FACTOR] = 0x001E,
    [SDM120M_FREQUENCY] = 0x0046,
    [SDM120M_IMPORT_ACTIVE_ENERGY_kWh] = 0x0048,
    [SDM120M_EXPORT_ACTIVE_ENERGY_kWh] = 0x004A,
    [SDM120M_IMPORT_REACTIVE_ENERGY_kVArh] = 0x004C,
    [SDM120M_EXPORT_REACTIVE_ENERGY_kVArh] = 0x004E,
    [SDM120M_TOTAL_SYSTEM_POWER_DEMAND_W] =0x0054,
    [SDM120M_MAXIMUM_TOTAL_SYSTEM_POWER_DEMAND_W] = 0x0056,
    [SDM120M_IMPORT_SYSTEM_POWER_DEMAND_W] = 0x0058,
    [SDM120M_MAXIMUM_IMPORT_SYSTEM_POWER_DEMAND_W] = 0x005A,
    [SDM120M_EXPORT_SYSTEM_POWER_DEMAND_W] = 0x005C,
    [SDM120M_MAXIMUM_EXPORT_SYSTEM_POWER_DEMAND] = 0x005E,
    [SDM120M_CURRENT_DEMAND_A] = 0x0102,
    [SDM120M_MAXIMUM_CURRENT_DEMAND_A] = 0x0108,
    [SDM120M_TOTAL_ACTIVE_ENERGY_kWh] = 0x0156,
    [SDM120M_TOTAL_REACTIVE_ENERGY_kVArh] = 0x0158,
};

void Sdm120m_init(void);
void Sdm120m_run(void);

void Sdm120m_parseModbusData(uint8_t ModuleIndx, uint8_t VariableIndx, uint8_t* DataIn);
void Sdm120m_modbus_compose(uint8_t* ModMsgData, uint8_t MsgIndx, uint8_t ModuleIndx);
void Sdm120m_can_compose(uint8_t* CanData, uint32_t* CanId, uint32_t Value1, uint32_t Value2, uint32_t CanMsgIndx, uint8_t ModuleIndx);

uint8_t Sdm120m_read_dataReadyFlag(uint8_t ModuleIndx, uint8_t VarIndx);
float Sdm120m_read_dataValue(uint8_t ModuleIndx, uint8_t VarIndx);
uint16_t Sdm120m_read_moduleId(uint8_t ModuleIndx);
const char* Sdm120m_read_dataName(uint8_t VarIndx);
void Sdm120m_clear_dataReadyFlag(uint8_t ModuleIndx, uint8_t MsgIndx1, uint8_t MsgIndx2);


#endif